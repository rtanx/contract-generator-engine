// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
{% if mintable %} 
import "@openzeppelin/contracts/access/Ownable.sol";
    {% if mintable.auto_increment_id %} 
import "@openzeppelin/contracts/utils/Counters.sol";
    {% endif %}
{% endif %}

contract MyToken is ERC721,{% if mintable %} Ownable {% endif %}{
    {% if mintable.auto_increment_id %} 
    using Counters for Counters.Counter;

    Counters.Counter private _tokenIdCounter;
    {% endif %}

    constructor() ERC721("{{ token_name }}", "{{ token_symbol }}") {}
    
{% if mintable %}
    {% if mintable.is_mintable and mintable.auto_increment_id %}
    function safeMint(address to) public onlyOwner {
        uint256 tokenId = _tokenIdCounter.current();
        _tokenIdCounter.increment();
        _safeMint(to, tokenId);
    }
    {% else %}
    function safeMint(address to, uint256 tokenId) public onlyOwner {
        _safeMint(to, tokenId);
    }
    {% endif %}

{% endif %}
}
